###############################################################################
## count total land - static value
###############################################################################

TOTAL_LAND = 92_598

###############################################################################
## count total deployed
###############################################################################

# can use this? - https://places.decentraland.org/api/places
# returns a total number of scenes & data about them

response = Adapters::Base.get('https://places.decentraland.org/api/places')
response.success['total'] # total number of scenes

# note that this is for the given response only, there are many pages of responses
# so to catch all of them they'd need to all be looped through - not so efficient
response.success['data'].sum { |x| x['positions'].count }

# could use tiles instead?
response = Adapters::Base.get('https://api.decentraland.org/v2/tiles')

# alternatively keep a static array of all tiles. it doesn't change
response.success['data'].each do |tile| # idk this is right syntax or not
  coordinates = tile['coordinates']
  # result = curl 'https://places.decentraland.org/api/places?positions=x,y'

  Models::Parcel.update_or_create(coordinates: coordinates) do |p|
    p.scene_exists = !result['data'].empty?
  end
end


## Better way => create a Parcel model from every tile - just read tiles.json
## once and then iterate through existing models after that

result = ""
conn = Faraday.new('https://api.decentraland.org/v2/tiles')
conn.get do |req|
  req.options.on_data = Proc.new do |chunk, size|
    result << chunk.to_s.encode('UTF-8', invalidndef: :replace, replace: '?')
  end
end

JSON.parse(result)['data'].each do |coordinates, tile|
  x, y = coordinates.split

  # send this to a job w/ the coordiates as arguments
  place_data = Adapters::Base.get("https://places.decentraland.org/api/places?positions=#{x},#{y}")
  Models::Parcel.update_or_create(x: x, y: y) do |p|
    p.data_json = tile.to_json
    # add this column to parcels table
    p.active_deploy = !place_data.success['data'].empty?
  end
end


###############################################################################
## count total active
###############################################################################

# daily active parcels + daily active scenes & sum parcels
