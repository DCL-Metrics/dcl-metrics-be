date = '2022-09-15'

# NOTE: the following two querys should just be one join query
cids = DATABASE_CONNECTION[
  "select distinct scene_cid
  from peer_stats
  where date = '#{date}'"
].all.flat_map(&:values)

# scenes.count is DailyStats#total_active_scenes
scenes = Models::Scene.where(cid: cids).uniq { |s| [s.name, s.parcels] }
public_roads = JSON.parse(File.read('./lib/static/roads.json'))
total_unique_users = Models::DailyStats.find(date: date).unique_users

cids_by_scene = scenes.
  reject { |s| s.parcels.any? { |parcel| public_roads.include?(parcel) } }.
  group_by { |s| [s.name, s.parcels] }.
  map { |group, data| [group.first, group.last, data.flat_map(&:cid)] }
  # the contents of map should be a job request so this gets parsed quickly

stats = cids_by_scene.map do |name, parcels, cids|
  # TODO: do i need to do something with the cids here?
  # TODO: wrapper / presenter class for scene traffic
  scene_traffic =  Models::ParcelTraffic.where(coordinates: parcels, date: date)
  scene_activities = Models::UserActivity.where(
    date: date,
    starting_coordinates: parcels,
    ending_coordinates: parcels
  )

  # total_visits (this should be used for calculations)
  # NOTE: this is actually wrong, it's all visits within the scene. so if i jump
  # back and forth between parcels 10 times that counts as ten visits but the
  # borders should be if someone exits the scene as a whole
  scene_total_visitors = scene_activities.where(name: 'visit').count
  # total unique visits
  scene_unique_visitors = scene_activities.where(name: 'visit').distinct(:address).count


  # PER PARCEL
  # number of unique addresses per parcel (in parcel traffic)
  # histogram per parcel (in parcel traffic)

  # PER SCENE
  # histogram overall (highest count per hour over the whole scene)

  # number of total unique addresses:
  # see note below - maybe it's better to use scene_unique_visitors here
  total_unique_addresses = scene_traffic.
    flat_map { |t| JSON.parse(t.addresses_json) }.uniq.count

  # share of daily dcl visitors (wording..?):
  # # "x% of users that visited dcl today visited this scene"
  share_of_global_visitors = scene_unique_visitors / total_unique_users.to_f

  # avg_time_spent
  total_visit_duration_seconds = scene_activities.where(name: 'visit').sum(:duration)
  avg_time_spent = (total_visit_duration_seconds / 60) / scene_total_visitors.to_f

  # avg_time_spent_afk
  total_afk_duration_seconds = scene_activities.where(name: 'afk').sum(:duration)
  avg_time_spent_afk = (total_afk_duration_seconds / 60) / scene_total_visitors.to_f

  # users with longest session
  visits_by_address = scene_activities.where(name: 'visit').all.group_by(&:address)
  visitors_by_duration = visits_by_address.
    map { |address, visits| [address, visits.map(&:duration).sum / 60] }.
    sort_by(&:last)

  marathon_users = visitors_by_duration.last(10)
  user_visit_histogram = visitors_by_duration.
    group_by { |address, duration| (duration / 60.to_f).floor }.
    map { |k, v| [k, v.size] }

  # * % of afk users
  total_afk_users = scene_activities.where(name: 'afk').distinct(:address).count
  percent_of_afk_users = total_afk_users / scene_unique_visitors.to_f

  # total logins:
  total_logins = Models::UserActivity.where(date: date, starting_coordinates: parcels, name: 'session').count
  # unique logins:
  unique_logins = Models::UserActivity.where(date: date, starting_coordinates: parcels, name: 'session').distinct(:address).count

  # total logouts:
  total_logouts = Models::UserActivity.where(date: date, ending_coordinates: parcels, name: 'session').count
  # unique logouts:
  unique_logouts = Models::UserActivity.where(date: date, ending_coordinates: parcels, name: 'session').distinct(:address).count

  # complete sessions (user logged in and logged out from this scene - not unique):
  complete_sessions = scene_activities.where(name: 'session')
  avg_complete_session_duration = (complete_sessions.sum(:duration) / 60) / complete_sessions.count.to_f


  # NOTE:
  # weirdly there is a discrepency between data points and the user activities
  # scene_traffic should be used to show the total visits, user activity should
  # be used for calculations. my guess is that the discrepency is due to users
  # blipping in and not having enough data to make a full visit activity
  # Models::UserActivity.where(date: date, starting_coordinates: scene.parcels, name: 'visit').distinct(:address).count
  # => 3432
  # scene_traffic.flat_map { |t| JSON.parse(t.addresses_json) }.uniq.count
  # => 3674

  {
    name: name,
    parcels: parcels,
    scene_total_visitors: scene_total_visitors,
    scene_unique_visitors: scene_unique_visitors,
    total_unique_addresses: total_unique_addresses,
    share_of_global_visitors: share_of_global_visitors,
    avg_time_spent: avg_time_spent,
    avg_time_spent_afk: avg_time_spent_afk,
    marathon_users: marathon_users,
    user_visit_histogram: user_visit_histogram,
    percent_of_afk_users: percent_of_afk_users,
    total_logins: total_logins,
    unique_logins: unique_logins,
    total_logouts: total_logouts,
    unique_logouts: unique_logouts,
    complete_sessions: complete_sessions.count,
    avg_complete_session_duration: avg_complete_session_duration
  }
end
