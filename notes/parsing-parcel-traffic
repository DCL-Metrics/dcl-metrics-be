# seans scene
# cid = "bafkreide7udj3ttlqhhmyb3p7v2cjgyfbcsrvemmd6gtviimugymcogbem"

# edifice
# cid = "bafkreifixh6rirjm6vlsnjaln4gr42l46lqg2vinrtqhfmr75tpct2fbdi"
scene = Models::Scene.find(cid: cid)

scenes = Models::Scene.where(name: scene.name, parcels: scene.parcels)

# unique visits
query = Models::ParcelTraffic.where(coordinates: JSON.parse(scene.parcels)).select(:histogram_json)

data = query.all.flat_map { |d| JSON.parse(d[:histogram_json]) }

sorted = data.
  group_by { |d| d['hour'] }.
  sort_by(&:first).to_h

result ={}
sorted.each do |time, data|
  result[time] = data.map { |d| d['count'] }.max
end

total_unique_visitors = result.values.sum

# total visits
query = Models::ParcelTraffic.where(coordinates: JSON.parse(scene.parcels)).select(:addresses_json, :coordinates, :date)

# daily histogram by parcel
data = query.all.map do |d|
  {
    date: d.date.to_s,
    coordinates: d.coordinates,
    count: JSON.parse(d.addresses_json).count
  }
end

# daily histogram
data = query.all.group_by(&:date).sort.map do |date, d|
  counts = d.flat_map { |dd| JSON.parse(dd.addresses_json) }.uniq.count
  { date.to_s => counts }
end
