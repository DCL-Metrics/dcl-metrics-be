date = (Date.today - 1).to_s
data_points = Models::DataPoint.where(date: date)
file_name = "#{date}_data_points"

CSV.open("#{file_name}.csv", 'wb') do |csv|
  csv << data_points.last.values.keys

  data_points.each_slice(500) do |batch|
    batch.each do |row|
      csv << row.values.values.tap do |x|
        x[3] = date
        x[4] = nil
      end.compact
    end
  end
end

system("tar -czvf #{file_name}.tar.gz #{file_name}.csv")

# test.csv    => 387  MB
# test.tar.gz => 90   MB

FileUtils.rm("#{file_name}.csv")

# move tar file to b2
b2_auth_url = 'https://api.backblazeb2.com/b2api/v2/b2_authorize_account'
conn = Faraday.new(b2_auth_url) do |conn|
  conn.request :authorization, :basic, ENV['B2_APPLICATION_KEY_FOR_WRITING_ID'], ENV['B2_APPLICATION_KEY_FOR_WRITING']
end

response = conn.get

auth = JSON.parse(response.body)
# TODO: handle error

b2_get_upload_url = "#{auth['apiUrl']}/b2api/v2/b2_get_upload_url"

response = Faraday.post(b2_get_upload_url) do |request|
  request.headers['Authorization'] = auth['authorizationToken']
  request.body = { bucketId: ENV['B2_DATA_POINTS_BUCKET_ID'] }.to_json
end

upload_data = JSON.parse(response.body)

file_to_upload = "#{file_name}.tar.gz"
sha1 = Digest::SHA1.new

File.open(file_to_upload) do |f|
  f.lazy.each_slice(1000) do |lines|
    lines.each { |line| sha1.update(line) }
  end
end

response = Faraday.post(upload_data['uploadUrl']) do |request|
  request.headers['Authorization'] = upload_data['authorizationToken']
  request.headers['X-Bz-File-Name'] = file_to_upload
  request.headers['Content-Type'] = 'application/gzip'
  request.headers['X-Bz-Content-Sha1'] = sha1.hexdigest
  request.headers['X-Bz-Info-Author'] = 'dcl-metrics'
  request.body = File.read(file_to_upload)
end

if response.success?
  # remove tar file
  FileUtils.rm(file_to_upload)

  # delete data_points from db
  data_points.delete
else
  # notify telegram that file didn't upload correctly
end
