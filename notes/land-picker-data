date = Date.today - 1

# NOTE: UUID of scene hashed by parcels/cids

# TODO: needs to join with user_activities on coordinates (but only certain type)
parcel_traffic = Models::ParcelTraffic.
  join(:scenes, cid: :scene_cid).
  where(date: date).
  all

result = parcel_traffic.group_by(&:coordinates).map do |coordinates, data|
  current_scene_data = data.max_by { |x| x.values[:first_seen_at].to_i }.values

  scenes = data.
    select do |x|
      x.values[:parcels_json] == current_scene_data[:parcels_json] &&
      x.values[:name] == current_scene_data[:name]
    end.
    map(&:values)

  current_scene = {}

  if scenes.any?
    current_scene = {
      cids: scenes.map { |x| x[:cid] },
      deploys: scenes.count,
      last_deployed_at: current_scene_data[:first_seen_at],
      name: scenes[0][:name],
      parcels: JSON.parse(scenes[0][:parcels_json]),
      visitors: scenes.map { |x| x[:unique_addresses] }.sum
    }
  end

  visits = Models::UserActivity.where(
    date: date,
    starting_coordinates: coordinates,
    name: 'visit'
  )

  afk = Models::UserActivity.where(
    date: date,
    starting_coordinates: coordinates,
    name: 'afk'
  )

  logins = Models::UserActivity.where(
    date: date,
    starting_coordinates: coordinates,
    name: 'session'
  )

  logouts = Models::UserActivity.where(
    date: date,
    starting_coordinates: coordinates,
    name: 'session'
  )

  total_avg_time_spent = visits.map(&:duration).sum / visits.count.to_f
  total_avg_time_spent_afk = afk.map(&:duration).sum / afk.count.to_f

  {
    coordinates: coordinates,
    deploy_count: data.map(&:scene_cid).compact.count,
    max_concurrent_users: data.max_by(&:max_concurrent_users).max_concurrent_users,
    total_visitors: data.map(&:unique_addresses).sum,
    total_avg_time_spent: total_avg_time_spent.nan? ? 0 : total_avg_time_spent,
    total_avg_time_spent_afk: total_avg_time_spent_afk.nan? ? 0 : total_avg_time_spent_afk,
    total_logins: logins.count,
    total_logouts: logouts.count,
    scene: current_scene.empty? ? nil : current_scene
  }
end

max_values = {
  visitors: result.max_by { |x| x[:total_visitors] }[:total_visitors],
  time_spent: result.max_by { |x| x[:total_avg_time_spent] }[:total_avg_time_spent],
  time_spent_afk: result.max_by { |x| x[:total_avg_time_spent_afk] }[:total_avg_time_spent_afk],
  logins: result.max_by { |x| x[:total_logins] }[:total_logins],
  logouts: result.max_by { |x| x[:total_logouts] }[:total_logouts],
  max_concurrent_users: result.max_by { |x| x[:max_concurrent_users] }[:max_concurrent_users]
}


result.each do |r|
  visitor_intensity = r[:total_visitors].zero? ? 0 : ((r[:total_visitors] / max_values[:visitors].to_f) * 100).round
  time_spent_intensity = r[:total_avg_time_spent].zero? ? 0 : ((r[:total_avg_time_spent] / max_values[:time_spent].to_f) * 100).round
  time_spent_afk_intensity = r[:total_avg_time_spent_afk].zero? ? 0 : ((r[:total_avg_time_spent_afk] / max_values[:time_spent_afk].to_f) * 100).round
  login_intensity = r[:total_logins].zero? ? 0 : ((r[:total_logins] / max_values[:logins].to_f) * 100).round
  logout_intensity = r[:total_logouts].zero? ? 0 : ((r[:total_logouts] / max_values[:logouts].to_f) * 100).round
  max_concurrent_user_intensity = r[:max_concurrent_users].zero? ? 0 : ((r[:max_concurrent_users] / max_values[:max_concurrent_users].to_f) * 100).round

  r.merge!(
    visitor_intensity: visitor_intensity.zero? ?  1 : visitor_intensity,
    time_spent_intensity: time_spent_intensity.zero? ? 1 : time_spent_intensity,
    time_spent_afk_intensity: time_spent_afk_intensity.zero? ? 1 : time_spent_afk_intensity,
    login_intensity: login_intensity.zero? ? 1 : login_intensity,
    logout_intensity: logout_intensity.zero? ? 1 : logout_intensity,
    max_concurrent_user_intensity: max_concurrent_user_intensity.zero? ? 1 : max_concurrent_user_intensity
  )
end


